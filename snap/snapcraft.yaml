name: rabbitmq-server-snap
base: core20
version: '3.6.10'
summary: AMQP server written in Erlang
description: |
  RabbitMQ is an implementation of AMQP, the emerging standard for
  high performance enterprise messaging. The RabbitMQ server is a
  robust and scalable implementation of an AMQP broker.
source-code: https://github.com/nicolasbock/rabbitmq-server-snap
website: https://github.com/nicolasbock/rabbitmq-server-snap
issues: https://github.com/nicolasbock/rabbitmq-server-snap/issues
contact: https://github.com/nicolasbock/rabbitmq-server-snap/issues
icon: assets/logo.png
license: Apache-2.0
architectures:
  - build-on: [amd64, i386, arm64]
grade: stable
confinement: strict

apps:
  rabbitmq-server:
    daemon: simple
    plugs:
      - network
      - network-bind
    restart-condition: on-failure
    restart-delay: 10s
    command: usr/lib/erlang/bin/rabbitmq-server
    stop-command: usr/lib/erlang/bin/rabbitmqctl stop
  rabbitmqctl:
    plugs:
      - network
    command: usr/lib/erlang/bin/rabbitmqctl
  epmd:
    plugs:
      - network
      - network-bind
    command: usr/lib/erlang/bin/epmd

parts:
  rabbitmq-support:
    plugin: dump
    source: assets
    organize:
      rabbitmq-defaults: etc/rabbitmq/rabbitmq-defaults
      rabbitmq-server.service: lib/systemd/system/rabbitmq-server.service
    stage:
      - etc/rabbitmq/rabbitmq-defaults
      - lib/systemd/system/rabbitmq-server.service

  # Building rabbitmq-server from git fails because the build script downloads other
  # repositories in `deps` and uses the `master` branch of them. This leads to build
  # failures because the Erlang version is not recent enough.
  rabbitmq-server:
    after:
      - elixir
      - erlang
    plugin: make
    # source: https://github.com/rabbitmq/rabbitmq-server.git
    # source-tag: rabbitmq_v3_6_10
    source: https://github.com/rabbitmq/rabbitmq-server/releases/download/rabbitmq_v3_6_10/rabbitmq-server_3.6.10.orig.tar.xz
    build-packages:
      - curl
      - python-all
      - python-simplejson
      - rsync
      - unzip
      - xmlto
      - xsltproc
      - zip
    stage-packages:
      - adduser
      - coreutils
      - libtinfo5
      - logrotate
      - lsb-base
      - socat
    override-build: |
      set -e -u -x

      # Create branch when checking out from git. Without a branch the build script
      # will fail.
      # git checkout -b buildbranch

      export DESTDIR=${SNAPCRAFT_PART_INSTALL}
      export PREFIX=/usr
      export PYTHON=python3
      export V=1

      sed --in-place \
        --expression 's:^SYS_PREFIX=.*:SYS_PREFIX=${SNAP_COMMON}:' \
        deps/rabbit/scripts/rabbitmq-defaults

      make dist manpages
      
      make install
      make install-bin

  elixir:
    after:
      - erlang
    plugin: make
    source: https://github.com/elixir-lang/elixir.git
    source-tag: v1.5.3
    override-build: |
      set -e -u -x

      env | sort

      make clean
      make compile
      # make test
      make install PREFIX=/usr DESTDIR=${SNAPCRAFT_PART_INSTALL}
    stage:
      - usr

  erlang:
    plugin: autotools
    source: https://github.com/erlang/otp.git
    source-tag: OTP-20.3.8.26
    build-packages:
      - libssl-dev
      - libncurses-dev
      - fop
    stage-packages:
      - openssl
      - ncurses-base
      - libncurses5
      - libtinfo5
    override-build: |
      set -e -u -x

      env | sort

      ./otp_build autoconf
      ./configure --prefix=/usr

      make
      make install DESTDIR=${SNAPCRAFT_PART_INSTALL}

      sed --in-place \
        --expression 's:^\(ROOTDIR\).*:\1=$(readlink --canonicalize $(dirname $0))/../lib/erlang:' \
        ${SNAPCRAFT_PART_INSTALL}/usr/bin/erl
    stage:
      - usr
