name: rabbitmq-server-snap
base: core22
version: '3.9.29'
summary: AMQP server written in Erlang
description: |
  RabbitMQ is an implementation of AMQP, the emerging standard for
  high performance enterprise messaging. The RabbitMQ server is a
  robust and scalable implementation of an AMQP broker.
source-code: https://github.com/nicolasbock/rabbitmq-server-snap
website: https://github.com/nicolasbock/rabbitmq-server-snap
issues: https://github.com/nicolasbock/rabbitmq-server-snap/issues
contact: https://github.com/nicolasbock/rabbitmq-server-snap/issues
icon: assets/logo.png
license: Apache-2.0
grade: stable
confinement: strict

apps:
  rabbitmq-server:
    # daemon: simple
    # restart-condition: on-failure
    # restart-delay: 10s
    command: usr/lib/erlang/bin/rabbitmq-server
    # stop-command: usr/lib/erlang/bin/rabbitmqctl stop
    plugs:
      - log-observe
      - mount-observe
      - network-bind
  rabbitmqctl:
    command: usr/lib/erlang/bin/rabbitmqctl

parts:
  # Building rabbitmq-server from git fails because the build script downloads other
  # repositories in `deps` and uses the `master` branch of them. This leads to build
  # failures because the Erlang version is not recent enough.
  #
  # RabbitMQ dependencies: https://www.rabbitmq.com/which-erlang.html
  rabbitmq-server:
    after:
      - elixir
      - erlang
    plugin: make
    source: https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.9.29/rabbitmq-server-3.9.29.tar.xz
    build-packages:
      - curl
      - python3-simplejson
      - rsync
      - unzip
      - xmlto
      - xsltproc
      - zip
    stage-packages:
      - adduser
      - coreutils
      - logrotate
      - lsb-base
      - socat
    override-build: |
      set -e -u -x

      echo "Start building rabbitmq-server at $(date)"
      START_TIME=$(date +%s)

      ps -ef

      export DESTDIR="${SNAPCRAFT_PART_INSTALL}"
      export PREFIX=/usr
      export PYTHON=python3
      export V=1

      sed --in-place \
        --expression 's:^SYS_PREFIX=.*:SYS_PREFIX=${SNAP_COMMON}:' \
        deps/rabbit/scripts/rabbitmq-defaults

      sed --in-place \
        --expression 's:^#!/bin/sh:#!/bin/sh -x:' \
        deps/rabbit/scripts/rabbitmq-env

      sed --in-place \
        --expression 's:^#!/bin/sh:#!/bin/bash:' \
        --expression 's,^set -e.*,set -e -x; export PS4='"'"'+(${BASH_SOURCE##*/}:${LINENO}) ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'"'"',' \
        --expression 's:exec erl:pwd; exec erl:' \
        deps/rabbit/scripts/rabbitmq-server

      # Because of LP#1987853 we need to run make inside a subshell and provide
      # it with another stdin.
      sh -c "yes '' | make -j ${SNAPCRAFT_PARALLEL_BUILD_COUNT}"
      sh -c "yes '' | make install install-bin"

      ps -ef

      echo "Finished building rabbitmq-server at $(date)"
      END_TIME=$(date +%s)
      echo "Total time: $((${END_TIME} - ${START_TIME})) seconds"

  elixir:
    after:
      - erlang
    plugin: make
    source: https://github.com/elixir-lang/elixir.git
    source-tag: v1.13.4
    source-depth: 1
    make-parameters:
      - test
      - PREFIX=/usr
    override-build: |
      echo "Start building elixir at $(date)"
      START_TIME=$(date +%s)

      ps -ef

      snapcraft build

      ps -ef

      pkill epmd

      echo "Finished building elixir at $(date)"
      END_TIME=$(date +%s)
      echo "Total time: $((${END_TIME} - ${START_TIME})) seconds"
    stage:
      - usr

  erlang:
    plugin: autotools
    source: https://github.com/erlang/otp.git
    source-tag: OTP-24.3.4.3
    source-depth: 1
    build-packages:
      - fop
      - libssl-dev
      - libncurses5-dev
      - libwxbase3.0-dev
      - libxml2-utils
      - xsltproc
    stage-packages:
      - openssl
      - ncurses-base
    override-build: |
      echo "Start building erlang at $(date)"
      START_TIME=$(date +%s)

      ps -ef

      export ERL_TOP=$(pwd)

      ./configure --prefix=/usr
      sh -c 'yes "" | make'
      sh -c 'yes "" | make release_tests'
      pushd release/tests/test_server
      sh -c "yes '' | ${ERL_TOP}/bin/erl -s ts install -s ts smoke_test batch -s init stop"
      popd
      sh -c 'yes "" | make install'

      sed --in-place \
        --expression 's:^#!/bin/sh:#!/bin/bash -x:' \
        --expression 's:^\(\s*ROOTDIR\)="/usr/.*":\1=$(readlink --canonicalize $(dirname $0)/../lib/erlang):' \
        ${SNAPCRAFT_PART_INSTALL}/usr/bin/erl
      sed --in-place \
        --expression 's:^\(\s*ROOTDIR\)="/usr/.*":\1=$(readlink --canonicalize $(dirname $0)/../..):' \
        ${SNAPCRAFT_PART_INSTALL}/usr/lib/erlang/erts-*/bin/start
      sed --in-place \
        --expression 's:^\(\s*ROOTDIR\)="/usr/.*":\1=$(readlink --canonicalize $(dirname $0)/../..):' \
        ${SNAPCRAFT_PART_INSTALL}/usr/lib/erlang/erts-*/bin/erl
      sed --in-place \
        --expression 's:^\(\s*ROOTDIR\)="/usr/.*":\1=$(readlink --canonicalize $(dirname $0)/..):' \
        ${SNAPCRAFT_PART_INSTALL}/usr/lib/erlang/bin/start
      sed --in-place \
        --expression 's:^\(\s*ROOTDIR\)="/usr/.*":\1=$(readlink --canonicalize $(dirname $0)/..):' \
        ${SNAPCRAFT_PART_INSTALL}/usr/lib/erlang/bin/erl

      ps -ef

      echo "Finished building erlang at $(date)"
      END_TIME=$(date +%s)
      echo "Total time: $((${END_TIME} - ${START_TIME})) seconds"
    stage:
      - etc
      - lib
      - usr
